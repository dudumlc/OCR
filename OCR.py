# Bibliotecas a serem utilizadas
import pytesseract
import cv2
import streamlit as st
from pdf2image import convert_from_path
import tempfile
import shutil
from PIL import Image

# Define o caminho para o execut√°vel do Tesseract dentro do reposit√≥rio
tesseract_cmd = os.path.join(os.path.dirname(__file__), 'tesseract.exe')

# Identifica√ß√£o do local onde realmente se encontra o tesseract (o pip instala em lugar errado)
pytesseract.pytesseract.tesseract_cmd = tesseract_cmd

# FUN√á√ÉO PARA TRANSFORMAR PDF EM PNG
def conversor_png(arquivo):
    # Leitura da imagem
    images = convert_from_path(arquivo, poppler_path="D:\\Users\\50109192\\AppData\\Local\\Programs\\Tesseract-OCR\\poppler-24.02.0\\Library\\bin")
    # Salvar cada pagina do PDF como uma imagem em uma lista
    lista_imagens_pdf = []
    for page in range(0, len(images)):
        lista_imagens_pdf.append(images[page])
    return lista_imagens_pdf

# FUN√á√ÉO PARA OCR COMPLETO DE P√ÅGINA DO PDF
def extracao_texto(nome_arquivo):
    # Leitura da imagem
    img = cv2.imread(nome_arquivo)
    # OCR da imagem lida
    return pytesseract.image_to_string(img, lang='por')

# CRIANDO INTERFACE

# Ajustando as vari√°veis dentro das "session states", para lidar melhor com os autos re-run do streamlit
if 'check_envio' not in st.session_state:
    st.session_state['check_envio'] = False
    # Tornar a check_envio para true depois que for clicada
def check_envio_true():
    st.session_state['check_envio'] = True
    # Tornar a check_envio para false caso o arquivo selecionado seja alterado
def check_envio_false():
    st.session_state.check_envio = False

# Abrindo a logo da Arcelor para colocar como √≠cone da p√°gina
icon_arcelor = Image.open('logo_cinza_laranja.png')

# Ajustando a largura e caracter√≠sticas da p√°gina
st.set_page_config(page_title="Extrator De Textos", layout='centered',page_icon=icon_arcelor)

# T√≠tulo da p√°gina

st.header("üìÉExtrator de Textos (OCR)")
st.subheader("Carregue abaixo arquivos em formato PNG ou PDF para exrair textos. ")
st.write("Obs.: O reconhecimento dos textos n√£o √© 100%. Confira e valide antes de qualquer uso.")

st.write('')
st.write('')
st.write('')
st.write('')
st.write('')

# Campo para upload de arquivo
img_user = st.file_uploader(label="Selecione seu arquivo:",accept_multiple_files=False, type=['png','pdf'])

# Se imagem selecionada...
if img_user:
    
    st.write('')
    st.write('')

    # Espa√ßo em branco reservado para o bot√£o de envio
    enviar_button_placeholder = st.empty()

    # Se o bot√£o de envio ainda n√£o tiver sido apertado, ele aparece
    if st.session_state['check_envio'] == False:
        if enviar_button_placeholder.button(label="Enviar"):
            # Se o bot√£o de envio for apertado, ele some
            enviar_button_placeholder.empty()

            # Enquanto a imagem est√° sendo lida, fica um spinner rodando
            with st.spinner('Extraindo texto do arquivo selecionado...'):

                # Criar um arquivo tempor√°rio para armazenar o upload
                with tempfile.NamedTemporaryFile(delete=False) as temp_file_nome_incorreto:
                    temp_file_nome_incorreto.write(img_user.getbuffer())
                    temp_file_nome_incorreto_path = temp_file_nome_incorreto.name

                # Confer√™ncia do tipo de arquivo inputado - se for png
                if img_user.type == 'image/png':

                    # Invocando a fun√ß√£o de extra√ß√£o criada
                    resultado_ocr = extracao_texto(temp_file_nome_incorreto_path)

                    # Apagar bot√£o
                    check_envio_false()

                    # Gerando o texto extra√≠do
                    st.download_button('Download do arquivo gerado.',data=resultado_ocr, file_name="Texto_Extraido.txt",type='primary')
                
                # Confer√™ncia do tipo de arquivo inputado - se for pdf
                else:
                    resultado_conversao = conversor_png(temp_file_nome_incorreto_path)

                    # Lista para armazenar os caminhos dos arquivos tempor√°rios
                    arquivos_temporarios = []

                    # Salva cada imagem como um arquivo tempor√°rio
                    for i, image in enumerate(resultado_conversao):
                        temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
                        image.save(temp_file.name)
                        arquivos_temporarios.append(temp_file.name)

                    # Criando uma lista com quantidade de p√°ginas para alimentar o seletor
                    resultado_ocr_convertido_final = str()
                    for qtd, name in enumerate(arquivos_temporarios):   
                    
                        resultado_ocr_convertido = extracao_texto(name)
                        resultado_ocr_convertido_final += f"--------------P√ÅGINA {qtd+1}--------------" + "\n" + resultado_ocr_convertido + "\n"
                    
                        # Espa√ßo reservado para o bot√£o de envio
                    enviar_button_placeholder = st.empty()

                    # Bot√£o para download do arquivo
                    download = st.download_button('Download do arquivo gerado.',
                                                data=resultado_ocr_convertido_final, 
                                                file_name="Texto_Extraido.txt",
                                                type='primary')
                

                    # Invocando a fun√ß√£o de extra√ß√£o criada para ler cada imagem criada do pdf
                    #for indice_arquivo, arquivos in enumerate(arquivos_temporarios):

                    #    resultado_ocr_convertido = extracao_texto(arquivos_temporarios[indice_arquivo])
                    #    st.text(resultado_ocr_convertido)


# Assinatura GITD
st.write('')
st.write('')
st.write('')
st.write('')
st.write('')
st.write('')
st.divider()
st.markdown("_Aplicativo desenvolvido e mantido pela Ger√™ncia de Inova√ß√£o e Transforma√ß√£o Digital - VPFCT_")
